from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, JSON, Numeric, CheckConstraint
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID
import uuid
from ..config.database import Base

class Summary(Base):
    """Document summaries generated by various tools/agents."""
    __tablename__ = 'summaries'

    # Primary Key
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # Core Fields
    document_id = Column(UUID(as_uuid=True), ForeignKey('documents.id', ondelete='CASCADE'), nullable=False)
    content = Column(Text, nullable=False)
    summary_type = Column(String(50), nullable=False)
    target_audience = Column(String(50))
    tool_agent = Column(String(100), nullable=False)
    tool_version = Column(String(50))
    config_parameters = Column(JSON)
    confidence_score = Column(Numeric(5, 4))
    created_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now())
    updated_at = Column(DateTime(timezone=True), nullable=False, server_default=func.now(), onupdate=func.now())
    word_count = Column(Integer)
    character_count = Column(Integer)
    language_code = Column(String(10), default='en')
    processing_time_ms = Column(Integer)
    status = Column(String(20), default='draft')

    # Relationships
    document = relationship("Document", back_populates="summaries")

    # Table Constraints
    __table_args__ = (
        CheckConstraint("confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1)",
                       name="summaries_valid_confidence"),
        CheckConstraint("status IN ('draft', 'published', 'archived')",
                       name="summaries_valid_status"),
    )

    def __repr__(self):
        return f"<Summary(id={self.id}, document_id={self.document_id}, type='{self.summary_type}')>"
