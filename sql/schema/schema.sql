-- Document Management System PostgreSQL Schema
-- This schema supports a document management system with:
-- - Document storage with versioning
-- - B2B multi-tenant organization structure 
-- - Graph-based document relationships
-- - Topic modeling and document clustering
-- - Tool/agent attribution for content generation

-- Function to automatically update timestamps
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Organization and user tables
CREATE TABLE organizations (
  id SERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  CONSTRAINT organizations_name_not_empty CHECK (length(trim(name)) > 0)
);

COMMENT ON TABLE organizations IS 'Organizations represent B2B tenants in the multi-tenant system';

-- Trigger to update timestamps
CREATE TRIGGER update_organizations_modtime
BEFORE UPDATE ON organizations
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username TEXT NOT NULL UNIQUE,
  email TEXT NOT NULL UNIQUE,
  org_id INTEGER NOT NULL REFERENCES organizations(id),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  CONSTRAINT users_username_not_empty CHECK (length(trim(username)) > 0),
  CONSTRAINT users_email_valid CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

COMMENT ON TABLE users IS 'Users belong to organizations and can own documents';

-- Trigger to update timestamps
CREATE TRIGGER update_users_modtime
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Document table with core attributes
CREATE TABLE documents (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  content TEXT NOT NULL,  -- Full document text
  owner_id INTEGER NOT NULL REFERENCES users(id),
  org_id INTEGER NOT NULL REFERENCES organizations(id),
  document_type VARCHAR(50) NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'draft',
  version INTEGER NOT NULL DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  file_format VARCHAR(50),
  size_bytes INTEGER,
  word_count INTEGER,
  processing_status VARCHAR(50) DEFAULT 'pending',
  source VARCHAR(100),
  content_hash VARCHAR(64),
  external_ref_id VARCHAR(100),
  metadata JSONB,  -- For flexible extended attributes
  CONSTRAINT documents_title_not_empty CHECK (length(trim(title)) > 0),
  CONSTRAINT documents_valid_status CHECK (status IN ('draft', 'published', 'archived', 'deleted')),
  CONSTRAINT documents_valid_version CHECK (version > 0),
  CONSTRAINT documents_valid_processing_status CHECK (processing_status IN ('pending', 'processing', 'complete', 'error'))
);

COMMENT ON TABLE documents IS 'Core document storage with ownership and metadata';

-- Trigger to update timestamps
CREATE TRIGGER update_documents_modtime
BEFORE UPDATE ON documents
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Summaries table
CREATE TABLE summaries (
  id SERIAL PRIMARY KEY,
  document_id INTEGER NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  summary_type VARCHAR(50) NOT NULL,
  target_audience VARCHAR(50),
  tool_agent VARCHAR(100) NOT NULL,
  tool_version VARCHAR(50),
  config_parameters JSONB,
  confidence_score DECIMAL(5,4),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  word_count INTEGER,
  character_count INTEGER,
  language_code VARCHAR(10) DEFAULT 'en',
  processing_time_ms INTEGER,
  status VARCHAR(20) DEFAULT 'draft',
  CONSTRAINT summaries_content_not_empty CHECK (length(trim(content)) > 0),
  CONSTRAINT summaries_valid_confidence CHECK (confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1)),
  CONSTRAINT summaries_valid_status CHECK (status IN ('draft', 'published', 'archived'))
);

COMMENT ON TABLE summaries IS 'Document summaries generated by various tools/agents';

-- Trigger to update timestamps
CREATE TRIGGER update_summaries_modtime
BEFORE UPDATE ON summaries
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Graph structure tables
CREATE TABLE graph_nodes (
  id SERIAL PRIMARY KEY,
  document_id INTEGER REFERENCES documents(id) ON DELETE SET NULL,  -- NULL if not associated with a document
  node_type VARCHAR(50) NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  properties JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_by_tool VARCHAR(100) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT graph_nodes_name_not_empty CHECK (length(trim(name)) > 0),
  CONSTRAINT graph_nodes_valid_type CHECK (node_type IN ('document', 'concept', 'entity', 'topic', 'user', 'custom'))
);

COMMENT ON TABLE graph_nodes IS 'Nodes for the graph representation of document connections';

-- Trigger to update timestamps
CREATE TRIGGER update_graph_nodes_modtime
BEFORE UPDATE ON graph_nodes
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TABLE graph_relationships (
  id SERIAL PRIMARY KEY,
  source_node_id INTEGER NOT NULL REFERENCES graph_nodes(id) ON DELETE CASCADE,
  target_node_id INTEGER NOT NULL REFERENCES graph_nodes(id) ON DELETE CASCADE,
  relationship_type VARCHAR(50) NOT NULL,
  is_directed BOOLEAN NOT NULL DEFAULT TRUE,
  weight DECIMAL(10,5),
  confidence_score DECIMAL(5,4),
  properties JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_by_tool VARCHAR(100) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT graph_relationships_valid_confidence CHECK (confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1)),
  CONSTRAINT graph_relationships_valid_weight CHECK (weight IS NULL OR weight > 0),
  CONSTRAINT graph_relationships_valid_type CHECK (relationship_type IN ('references', 'contains', 'related_to', 'similar_to', 'contradicts', 'supports', 'custom'))
);

COMMENT ON TABLE graph_relationships IS 'Relationships between nodes in the document graph structure';

-- Trigger to update timestamps
CREATE TRIGGER update_graph_relationships_modtime
BEFORE UPDATE ON graph_relationships
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Topics and clusters tables
CREATE TABLE topics (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  keywords TEXT[],
  parent_topic_id INTEGER REFERENCES topics(id) ON DELETE SET NULL,
  extraction_method VARCHAR(50),
  global_importance DECIMAL(5,4),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_by_tool VARCHAR(100),
  is_active BOOLEAN NOT NULL DEFAULT TRUE,
  CONSTRAINT topics_name_not_empty CHECK (length(trim(name)) > 0),
  CONSTRAINT topics_valid_importance CHECK (global_importance IS NULL OR (global_importance >= 0 AND global_importance <= 1)),
  CONSTRAINT topics_no_self_reference CHECK (parent_topic_id != id)
);

COMMENT ON TABLE topics IS 'Topics extracted from document content for categorization and discovery';

-- Trigger to update timestamps
CREATE TRIGGER update_topics_modtime
BEFORE UPDATE ON topics
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TABLE document_topics (
  id SERIAL PRIMARY KEY,
  document_id INTEGER NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
  topic_id INTEGER NOT NULL REFERENCES topics(id) ON DELETE CASCADE,
  relevance_score DECIMAL(5,4) NOT NULL,
  context JSONB,
  extracted_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  extracted_by_tool VARCHAR(100) NOT NULL,
  CONSTRAINT document_topics_valid_relevance CHECK (relevance_score >= 0 AND relevance_score <= 1),
  UNIQUE(document_id, topic_id)
);

COMMENT ON TABLE document_topics IS 'Junction table connecting documents to their topics with relevance scores';

-- Trigger to update timestamps
CREATE TRIGGER update_document_topics_modtime
BEFORE UPDATE ON document_topics
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TABLE document_clusters (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  algorithm VARCHAR(50) NOT NULL,
  parameters JSONB,
  validity_metrics JSONB,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_by_tool VARCHAR(100) NOT NULL,
  version INTEGER NOT NULL DEFAULT 1,
  CONSTRAINT document_clusters_name_not_empty CHECK (length(trim(name)) > 0),
  CONSTRAINT document_clusters_algorithm_not_empty CHECK (length(trim(algorithm)) > 0),
  CONSTRAINT document_clusters_valid_version CHECK (version > 0)
);

COMMENT ON TABLE document_clusters IS 'Clusters of related documents generated by clustering algorithms';

-- Trigger to update timestamps
CREATE TRIGGER update_document_clusters_modtime
BEFORE UPDATE ON document_clusters
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TABLE document_cluster_members (
  id SERIAL PRIMARY KEY,
  document_id INTEGER NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
  cluster_id INTEGER NOT NULL REFERENCES document_clusters(id) ON DELETE CASCADE,
  membership_score DECIMAL(5,4) NOT NULL,
  distance_from_centroid DECIMAL(10,6),
  assignment_timestamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  is_primary_cluster BOOLEAN DEFAULT FALSE,
  CONSTRAINT document_cluster_members_valid_membership CHECK (membership_score >= 0 AND membership_score <= 1),
  CONSTRAINT document_cluster_members_valid_distance CHECK (distance_from_centroid IS NULL OR distance_from_centroid >= 0),
  UNIQUE(document_id, cluster_id)
);

COMMENT ON TABLE document_cluster_members IS 'Junction table connecting documents to clusters with membership scores';

-- Trigger to update timestamps
CREATE TRIGGER update_document_cluster_members_modtime
BEFORE UPDATE ON document_cluster_members
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Document version history
CREATE TABLE document_versions (
  id SERIAL PRIMARY KEY,
  document_id INTEGER NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
  version INTEGER NOT NULL,
  content TEXT NOT NULL,
  title TEXT NOT NULL,
  status VARCHAR(20) NOT NULL,
  modified_by INTEGER NOT NULL REFERENCES users(id),
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  change_description TEXT,
  metadata JSONB,
  CONSTRAINT document_versions_title_not_empty CHECK (length(trim(title)) > 0),
  CONSTRAINT document_versions_valid_status CHECK (status IN ('draft', 'published', 'archived', 'deleted')),
  CONSTRAINT document_versions_valid_version CHECK (version > 0),
  UNIQUE(document_id, version)
);

COMMENT ON TABLE document_versions IS 'Historical versions of documents for version control';

-- Core indexes for performance
CREATE INDEX idx_documents_owner ON documents(owner_id);
CREATE INDEX idx_documents_organization ON documents(org_id);
CREATE INDEX idx_documents_type_status ON documents(document_type, status);
CREATE INDEX idx_documents_created ON documents(created_at);
CREATE INDEX idx_documents_updated ON documents(updated_at);
CREATE INDEX idx_documents_content_hash ON documents(content_hash) WHERE content_hash IS NOT NULL;
CREATE INDEX idx_documents_external_ref ON documents(external_ref_id) WHERE external_ref_id IS NOT NULL;

CREATE INDEX idx_summaries_document ON summaries(document_id);
CREATE INDEX idx_summaries_tool_agent ON summaries(tool_agent);
CREATE INDEX idx_summaries_type ON summaries(summary_type);
CREATE INDEX idx_summaries_created ON summaries(created_at);

CREATE INDEX idx_graph_nodes_document ON graph_nodes(document_id) WHERE document_id IS NOT NULL;
CREATE INDEX idx_graph_nodes_type ON graph_nodes(node_type);
CREATE INDEX idx_graph_nodes_is_active ON graph_nodes(is_active) WHERE is_active = TRUE;
CREATE INDEX idx_graph_nodes_created_by ON graph_nodes(created_by_tool);

CREATE INDEX idx_graph_relationships_source ON graph_relationships(source_node_id);
CREATE INDEX idx_graph_relationships_target ON graph_relationships(target_node_id);
CREATE INDEX idx_graph_relationships_type ON graph_relationships(relationship_type);
CREATE INDEX idx_graph_relationships_is_active ON graph_relationships(is_active) WHERE is_active = TRUE;
CREATE INDEX idx_graph_relationships_created_by ON graph_relationships(created_by_tool);

CREATE INDEX idx_topics_parent ON topics(parent_topic_id) WHERE parent_topic_id IS NOT NULL;
CREATE INDEX idx_topics_is_active ON topics(is_active) WHERE is_active = TRUE;
CREATE INDEX idx_topics_created_by ON topics(created_by_tool) WHERE created_by_tool IS NOT NULL;

CREATE INDEX idx_document_topics_document ON document_topics(document_id);
CREATE INDEX idx_document_topics_topic ON document_topics(topic_id);
CREATE INDEX idx_document_topics_relevance ON document_topics(relevance_score DESC);
CREATE INDEX idx_document_topics_extracted_by ON document_topics(extracted_by_tool);

CREATE INDEX idx_document_clusters_created_by ON document_clusters(created_by_tool);
CREATE INDEX idx_document_clusters_algorithm ON document_clusters(algorithm);

CREATE INDEX idx_document_cluster_members_document ON document_cluster_members(document_id);
CREATE INDEX idx_document_cluster_members_cluster ON document_cluster_members(cluster_id);
CREATE INDEX idx_document_cluster_members_primary ON document_cluster_members(is_primary_cluster) WHERE is_primary_cluster = TRUE;
CREATE INDEX idx_document_cluster_members_score ON document_cluster_members(membership_score DESC);

CREATE INDEX idx_document_versions_document ON document_versions(document_id, version);
CREATE INDEX idx_document_versions_modified_by ON document_versions(modified_by);
CREATE INDEX idx_document_versions_created ON document_versions(created_at);

-- Full-text search indexes with improved language support
CREATE INDEX idx_documents_title_tsvector ON documents USING GIN (to_tsvector('english', title));
CREATE INDEX idx_documents_content_tsvector ON documents USING GIN (to_tsvector('english', content));
CREATE INDEX idx_summaries_content_tsvector ON summaries USING GIN (to_tsvector('english', content));
CREATE INDEX idx_topics_name_tsvector ON topics USING GIN (to_tsvector('english', name));
CREATE INDEX idx_topics_description_tsvector ON topics USING GIN (to_tsvector('english', description)) WHERE description IS NOT NULL;

-- Composite indexes for common query patterns
CREATE INDEX idx_documents_org_type_status ON documents(org_id, document_type, status);
CREATE INDEX idx_documents_owner_status_created ON documents(owner_id, status, created_at DESC);
CREATE INDEX idx_summaries_doc_type_tool ON summaries(document_id, summary_type, tool_agent);
CREATE INDEX idx_document_topics_score_extracted ON document_topics(document_id, relevance_score DESC, extracted_at DESC);

-- Partial indexes for active/published content
CREATE INDEX idx_documents_published ON documents(id, created_at DESC) WHERE status = 'published';
CREATE INDEX idx_summaries_published ON summaries(id, created_at DESC) WHERE status = 'published';

-- Performance indexes for graph traversal
CREATE INDEX idx_graph_relationships_active_source_type ON graph_relationships(source_node_id, relationship_type) WHERE is_active = TRUE;
CREATE INDEX idx_graph_relationships_active_target_type ON graph_relationships(target_node_id, relationship_type) WHERE is_active = TRUE;
CREATE INDEX idx_graph_nodes_active_type_created ON graph_nodes(node_type, created_at DESC) WHERE is_active = TRUE;

-- BRIN indexes for time-based queries on large tables
CREATE INDEX idx_documents_created_brin ON documents USING BRIN (created_at);
CREATE INDEX idx_document_versions_created_brin ON document_versions USING BRIN (created_at);

-- JSONB indexes
CREATE INDEX idx_documents_metadata ON documents USING GIN (metadata) WHERE metadata IS NOT NULL;
CREATE INDEX idx_summaries_config_parameters ON summaries USING GIN (config_parameters) WHERE config_parameters IS NOT NULL;
CREATE INDEX idx_graph_nodes_properties ON graph_nodes USING GIN (properties) WHERE properties IS NOT NULL;
CREATE INDEX idx_graph_relationships_properties ON graph_relationships USING GIN (properties) WHERE properties IS NOT NULL;
CREATE INDEX idx_document_topics_context ON document_topics USING GIN (context) WHERE context IS NOT NULL;
CREATE INDEX idx_document_clusters_parameters ON document_clusters USING GIN (parameters) WHERE parameters IS NOT NULL;
CREATE INDEX idx_document_clusters_metrics ON document_clusters USING GIN (validity_metrics) WHERE validity_metrics IS NOT NULL;
CREATE INDEX idx_document_versions_metadata ON document_versions USING GIN (metadata) WHERE metadata IS NOT NULL;
